// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using shuttercart.Data;
using shuttercart.Data.Entity;
using System;

namespace shuttercart.Data.Migrations
{
    [DbContext(typeof(ShutterCartContext))]
    [Migration("20180705082402_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("shuttercart.Data.Entity.Advert", b =>
                {
                    b.Property<int>("AdvertId")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("ImageUrl");

                    b.Property<bool>("IsCancelled");

                    b.Property<long>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<bool>("Status");

                    b.HasKey("AdvertId");

                    b.ToTable("Advert");
                });

            modelBuilder.Entity("shuttercart.Data.Entity.Category", b =>
                {
                    b.Property<long>("CategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Icon");

                    b.Property<bool>("IsCancelled");

                    b.Property<long>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<bool>("Status");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("shuttercart.Data.Entity.Claim", b =>
                {
                    b.Property<int>("ClaimId")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsCancelled");

                    b.Property<long>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<bool>("Status");

                    b.Property<string>("Type");

                    b.Property<long>("UserId");

                    b.Property<string>("Value");

                    b.HasKey("ClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("Claim");
                });

            modelBuilder.Entity("shuttercart.Data.Entity.Genre", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsCancelled");

                    b.Property<long>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<bool>("Status");

                    b.Property<string>("VideoGenre");

                    b.HasKey("Id");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("shuttercart.Data.Entity.Product", b =>
                {
                    b.Property<long>("ProductId")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CategoryId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ImageUrl");

                    b.Property<bool>("IsCancelled");

                    b.Property<long>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<decimal>("Price");

                    b.Property<string>("ProductName");

                    b.Property<bool>("Status");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("shuttercart.Data.Entity.Questions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Answer");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsCancelled");

                    b.Property<long>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("OptionA");

                    b.Property<string>("OptionB");

                    b.Property<string>("OptionC");

                    b.Property<string>("OptionD");

                    b.Property<string>("Question");

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("shuttercart.Data.Entity.Receipt", b =>
                {
                    b.Property<long>("ReceiptId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category");

                    b.Property<long>("ContentLength");

                    b.Property<string>("ContentType")
                        .HasMaxLength(20);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Currency");

                    b.Property<DateTime>("Date");

                    b.Property<string>("FilePath");

                    b.Property<bool>("IsCancelled");

                    b.Property<string>("MerchantName");

                    b.Property<long>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("ReceiptRef");

                    b.Property<bool>("Status");

                    b.Property<decimal>("TotalAmount");

                    b.Property<decimal>("TotalTax");

                    b.HasKey("ReceiptId");

                    b.ToTable("Receipt");
                });

            modelBuilder.Entity("shuttercart.Data.Entity.Role", b =>
                {
                    b.Property<long>("RoleId")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsCancelled");

                    b.Property<long>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<bool>("Status");

                    b.HasKey("RoleId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("shuttercart.Data.Entity.SocialLogin", b =>
                {
                    b.Property<int>("SocialLoginId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Key");

                    b.Property<string>("Name");

                    b.Property<string>("Provider");

                    b.Property<string>("UserId");

                    b.Property<long?>("UserId1");

                    b.HasKey("SocialLoginId");

                    b.HasIndex("UserId1");

                    b.ToTable("SocialLogin");
                });

            modelBuilder.Entity("shuttercart.Data.Entity.SurveyQuestion", b =>
                {
                    b.Property<long>("SurveyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AnswerSelected");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsCancelled");

                    b.Property<long>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("QuestionId");

                    b.Property<int>("Score");

                    b.Property<bool>("Status");

                    b.Property<long>("UserId");

                    b.HasKey("SurveyId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("SurveyQuestion");
                });

            modelBuilder.Entity("shuttercart.Data.Entity.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("ApplicationCode");

                    b.Property<long>("ApplicationUserId");

                    b.Property<int>("Channel");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(450);

                    b.Property<string>("FirstName");

                    b.Property<int>("Gender");

                    b.Property<bool>("IsCancelled");

                    b.Property<bool>("IsEmailConfirmed");

                    b.Property<bool>("IsLocked");

                    b.Property<bool>("IsPhoneConfirmed");

                    b.Property<DateTime>("LastLoginDate");

                    b.Property<string>("LastName");

                    b.Property<string>("MiddleName");

                    b.Property<string>("Mobile");

                    b.Property<long>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Password");

                    b.Property<string>("Salt");

                    b.Property<bool>("Status");

                    b.Property<string>("Title");

                    b.Property<string>("UserName");

                    b.Property<int>("UserStatus");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("shuttercart.Data.Entity.UserPoint", b =>
                {
                    b.Property<long>("UserPointId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Channel");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsCancelled");

                    b.Property<long>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("Point");

                    b.Property<bool>("Status");

                    b.Property<long>("UserId");

                    b.HasKey("UserPointId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPoint");
                });

            modelBuilder.Entity("shuttercart.Data.Entity.UserRole", b =>
                {
                    b.Property<long>("UserRoleId")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsCancelled");

                    b.Property<long>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("RoleId");

                    b.Property<bool>("Status");

                    b.Property<long>("UserId");

                    b.HasKey("UserRoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("shuttercart.Data.Entity.Video", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("GenreId");

                    b.Property<bool>("IsCancelled");

                    b.Property<long>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("Points");

                    b.Property<bool>("Status");

                    b.Property<string>("ThumbNail");

                    b.Property<string>("Title");

                    b.Property<string>("VideoUrl");

                    b.Property<long>("Views");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Video");
                });

            modelBuilder.Entity("shuttercart.Data.Entity.Claim", b =>
                {
                    b.HasOne("shuttercart.Data.Entity.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("shuttercart.Data.Entity.Product", b =>
                {
                    b.HasOne("shuttercart.Data.Entity.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("shuttercart.Data.Entity.SocialLogin", b =>
                {
                    b.HasOne("shuttercart.Data.Entity.User", "User")
                        .WithMany("SocialLogins")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("shuttercart.Data.Entity.SurveyQuestion", b =>
                {
                    b.HasOne("shuttercart.Data.Entity.Questions", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("shuttercart.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("shuttercart.Data.Entity.UserPoint", b =>
                {
                    b.HasOne("shuttercart.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("shuttercart.Data.Entity.UserRole", b =>
                {
                    b.HasOne("shuttercart.Data.Entity.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("shuttercart.Data.Entity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("shuttercart.Data.Entity.Video", b =>
                {
                    b.HasOne("shuttercart.Data.Entity.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
